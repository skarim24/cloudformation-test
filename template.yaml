Parameters:
  ImageId:
    Description: Amazon EC2 AMI 
    Type: String
    Default: ami-xxxxx
    
  KeyPair:
    Description: Amazon EC2 keypair that you will use to connect to your server using ssh 
    Type: String
    Default: keypaiir-xxxxx
    
  InstanceType:
    Description: Amazon EC2 instance type for the instances
    Type: String
    AllowedValues:
      - t3.micro
      - t2.micro
      - t2.medium
    Default: t2.medium

  
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24
    

Resources:
    # vpc 
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName
  
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName
  
    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC
        
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet1CIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: PublicSubnet1

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs  '' ]
        CidrBlock: !Ref PublicSubnet2CIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: PublicSubnet2
  
    
            
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: PublicRouteTable

    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
  
    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1
  
    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2
  
  

    # server
    AWSServer1: 
      Type: AWS::EC2::Instance
      Properties: 
        ImageId: !Ref ImageId
        KeyName: !Ref KeyPair
        InstanceType: !Ref InstanceType
        AvailabilityZone: !GetAtt
                          - PublicSubnet1
                          - AvailabilityZone
        SubnetId: !Ref PublicSubnet1
        BlockDeviceMappings: 
          - DeviceName: "/dev/sdh"
            Ebs: 
              VolumeType: "io1"
              Iops: "200"
              DeleteOnTermination: "false"
              VolumeSize: "20"
        SecurityGroupIds:
             - !GetAtt
               - Ec2SSecurityGroup
               - GroupId
        # this property allow us to execute some scripts and linux
        # commands once the instance starts
        UserData:
            Fn::Base64: !Sub |
                #!/bin/bash
                sudo amazon-linux-extras install nginx1 -y
                sudo service nginx start
    
    
    
    Ec2SSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Security group for ec2 allow ssh and http
        GroupName: ec2-cloudformation-sg
        SecurityGroupEgress: 
            - IpProtocol: "-1"
              CidrIp: 0.0.0.0/0
        SecurityGroupIngress: 
          # this will allow connection on port 80 of the instance
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
            
          # this will allow ssh connection on the instance
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        Tags: 
          - Key: Name
            Value: Ec2SSecurityGroup
        VpcId: !Ref VPC


    